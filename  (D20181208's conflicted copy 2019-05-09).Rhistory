intensity <- search_result$results$intensity[wbc]
if(length(wbc)>1){
wbc = which(intensity == max(intensity))
if(length(wbc)>1){
wbc = wbc[1]
}
}
search <- search_result$search
cln <- colnames(search)
cln[1] <- "MS1_idx"
cln[2] <- "MS1_rt"
cln[3] <- "MS1_mz"
cln[4] <- "MS1_intensity"
cln[5] <- "MS1_area"
cln[6] <- "MS1_ion_type"
cln[7] <- "MS1_isotope"
colnames(search) <- cln
best_candidate <- cbind(search_result$results[wbc,],
search_result$ratios[wbc,],
search_result$deltas[wbc,],
search_result$scores[wbc,])
search_result$best_candidate <- best_candidate
searchResultList[[i]] <- search_result
#i<-i+1
}
for(i in seq_len(length(searchResultList))){
search_result = searchResultList[[i]]
# print(i)
score <- dlaplace(X=search_result$deltas$dM_ppm, m = mod_mz$mu, b = mod_mz$b) / (mod_mz$unif)
score <- 2*log(score)
search_result$global_scores$global_score_NL = score
w <- as.numeric(unlist(sapply(search_result$deltas$dM_ppm, function(x) which(  abs(mod_mz$o.x-abs(x))==min(abs(mod_mz$o.x-abs(x))) )   )))
#  cat(paste(w))
if(length(w)>1){
w = w[1]
}
search_result$global_scores$prob_NL = mod_mz$z[w]
search_result$global_scores$total_combined_score = search_result$scores$score_feature * search_result$global_scores$prob_NL
### assign the best candidate
wbc <- which(search_result$scores$score_feature == max(search_result$scores$score_feature))
#best_candidate <- search_result[wbc,]
intensity <- search_result$results$intensity[wbc]
if(length(wbc)>1){
wbc = which(intensity == max(intensity))
if(length(wbc)>1){
wbc = wbc[1]
}
}
search <- search_result$search
cln <- colnames(search)
cln[1] <- "MS1_idx"
cln[2] <- "MS1_rt"
cln[3] <- "MS1_mz"
cln[4] <- "MS1_intensity"
cln[5] <- "MS1_area"
cln[6] <- "MS1_ion_type"
cln[7] <- "MS1_isotope"
colnames(search) <- cln
best_candidate <- cbind(search_result$results[wbc,],
search_result$ratios[wbc,],
search_result$deltas[wbc,],
search_result$scores[wbc,])
search_result$best_candidate <- best_candidate
searchResultList[[i]] <- search_result
#i<-i+1
}
searchResultList[[500]]
searchResultList
searchResultList[[50]]
lapply(searchResultList, function(x) x$best_candidate)
sapply(searchResultList, function(x) x$best_candidate)
lapply(searchResultList, function(x) x$best_candidate)
unlist(lapply(searchResultList, function(x) x$best_candidate), recursive = F)
searchResultList <- lapply(seq_len(length(NLM)), function(x) search_adduct(adduct_mass = NLM[x],adduct_name = names(NLM[x]), data_X = data_X, data_Y = data_Y, rt_tol = rt_tol, ppm_window = ppm_window,nCore = nCore))
library(wSIMCity)
searchResultList <- lapply(seq_len(length(NLM)), function(x) search_adduct(adduct_mass = NLM[x],adduct_name = names(NLM[x]), data_X = data_X, data_Y = data_Y, rt_tol = rt_tol, ppm_window = ppm_window,nCore = nCore))
# This step prepares to get a model developed
dM <- lapply(searchResultList, function(y) unlist(lapply(y, function(x) x$deltas$dM_ppm)) )
mod_mz <- laplace_unif_EM(unlist(dM),instrument_tol = instrument_tol,boost=boost)
x <- seq(-ppm_window,ppm_window,by=2*ppm_window/211)
d_lap <- dlaplace(x,mod_mz$mu, mod_mz$b)
searchResultList <- lapply(seq_len(length(searchResultList)), function(x) getNLMScore(searchResultList[[x]],mod_mz))
searchResultList <- lapply(searchResultList, function(x) getNLMScore(x,mod_mz))
searchResultList = searchResultList[[1]]
searchResultList[[1]]
for(i in seq_len(length(searchResultList))){
search_result = searchResultList[[i]]
# print(i)
score <- dlaplace(X=search_result$deltas$dM_ppm, m = mod_mz$mu, b = mod_mz$b) / (mod_mz$unif)
score <- 2*log(score)
search_result$global_scores$global_score_NL = score
w <- as.numeric(unlist(sapply(search_result$deltas$dM_ppm, function(x) which(  abs(mod_mz$o.x-abs(x))==min(abs(mod_mz$o.x-abs(x))) )   )))
#  cat(paste(w))
if(length(w)>1){
w = w[1]
}
search_result$global_scores$prob_NL = mod_mz$z[w]
search_result$global_scores$total_combined_score = search_result$scores$score_feature * search_result$global_scores$prob_NL
### assign the best candidate
wbc <- which(search_result$scores$score_feature == max(search_result$scores$score_feature))
#best_candidate <- search_result[wbc,]
intensity <- search_result$results$intensity[wbc]
if(length(wbc)>1){
wbc = which(intensity == max(intensity))
if(length(wbc)>1){
wbc = wbc[1]
}
}
search <- search_result$search
cln <- colnames(search)
cln[1] <- "MS1_idx"
cln[2] <- "MS1_rt"
cln[3] <- "MS1_mz"
cln[4] <- "MS1_intensity"
cln[5] <- "MS1_area"
cln[6] <- "MS1_ion_type"
cln[7] <- "MS1_isotope"
colnames(search) <- cln
best_candidate <- cbind(search_result$results[wbc,],
search_result$ratios[wbc,],
search_result$deltas[wbc,],
search_result$scores[wbc,])
search_result$best_candidate <- best_candidate
searchResultList[[i]] <- search_result
#i<-i+1
}
searchResultList[[1]]
searchResultList
searchResultList <- lapply(searchResultList, function(x) getNLMScore(x,mod_mz))
searchResultList[[1]]
searchResultList <- getNLMScore(searchResultList,mod_mz))
searchResultList <- getNLMScore(searchResultList,mod_mz)
searchResultList
rm(getNLMScore)
searchResultList <- getNLMScore(searchResultList,mod_mz)
library(wSIMCity)
searchResultList <- getNLMScore(searchResultList,mod_mz)
searchResultList
searchResultList[[1]]
searchResultList <- lapply(seq_len(length(NLM)), function(x) search_adduct(adduct_mass = NLM[x],adduct_name = names(NLM[x]), data_X = data_X, data_Y = data_Y, rt_tol = rt_tol, ppm_window = ppm_window,nCore = nCore))
searchResultList <- lapply(searchResultList,function(x) getNLMScore(x,mod_mz))
searchResultList[[1]][[1]]
# This step prepares to get a model developed
dM <- lapply(searchResultList, function(y) unlist(lapply(y, function(x) x$deltas$dM_ppm)) )
mod_mz <- laplace_unif_EM(unlist(dM),instrument_tol = instrument_tol,boost=boost)
x <- seq(-ppm_window,ppm_window,by=2*ppm_window/211)
d_lap <- dlaplace(x,mod_mz$mu, mod_mz$b)
searchResultList <- lapply(searchResultList,function(x) getNLMScore(x,mod_mz))
library(wSIMCity)
searchResultList <- lapply(searchResultList,function(x) getNLMScore(x,mod_mz))
searchResultList[[1]][[1]]
md <- modelNLM(data_X = data_X, data_Y = data_Y)
md <- modelNLM(data_X = data_X, data_Y = data_Y, neutral_loss_list_file = "nl_list.txt")
library(wSIMCity)
nl = modelNLM(data_X,data_Y,neutral_loss_list_file = "nl_list.txt")
nl[[1]][[1]]
search_result <- nl[[1]][[1]]
search_result$search
search_result$search[1:5]
c(search_result$search[1:5],search_result$best_candidate[c(1:5,8:18)])
search_result$best_candidate[c(1:5,8:18)]
line <- c(search_result$search[1:5],search_result$best_candidate[c(1:5,8:18)])
line
as.vector(line)
line <- as.character(c(search_result$search[1:5],search_result$best_candidate[c(1:5,8:18)]))
line
line <- paste(as.character(c(search_result$search[1:5],search_result$best_candidate[c(1:5,8:18)])),collapse = "\t")
line
search_result
out_line = "PkIndex_MS1\tRT_MS1\tmz_MS1\tintensity_MS1\tarea_MS1\tPkIndex_MS2\tRT_MS2\tmz_MS2\tintensity_MS2\tarea_MS2\tratio_area\tratio_int\tdM\tdM_PPM\tdRT\tscore_mass\tscore_rt\tscore_feature\tprob\tscore_global\ttotal_score"
for(search_result in searchResultList){
line <- paste(as.character(c(search_result$search[1:5],search_result$best_candidate[c(1:5,8:18)])),collapse = "\t")
out_line = c(out_line,line)
}
out_line
searchResultList[[1]]
out_line = "PkIndex_MS1\tRT_MS1\tmz_MS1\tintensity_MS1\tarea_MS1\tPkIndex_MS2\tRT_MS2\tmz_MS2\tintensity_MS2\tarea_MS2\tratio_area\tratio_int\tdM\tdM_PPM\tdRT\tscore_mass\tscore_rt\tscore_feature\tprob\tscore_global\ttotal_score"
for(search_result in searchResultList[[1]]){
line <- paste(as.character(c(search_result$search[1:5],search_result$best_candidate[c(1:5,8:18)])),collapse = "\t")
out_line = c(out_line,line)
}
out_line
fh = "test.tsv"
write(file=fh,out_line)
searchResultList[[1]][[1]]
searchResultList = nl[[1]]
searchResultList[[1]]
score_feature <- lapply(searcResultList, function(x)x$best_candidate$score_feature )
score_feature <- lapply(searchResultList, function(x)x$best_candidate$score_feature )
score_feature
score_feature <- unlist(lapply(searchResultList, function(x)x$best_candidate$score_feature ))
score_feature <- unlist(lapply(searchResultList, function(x)x$best_candidate$score_feature ))
score_feature
hist(score_feature)
hist(score_feature, n=100)
hist(score_feature, n=1000)
score_feature <- unlist(lapply(searchResultList, function(x)x$best_candidate$score_mass ))
hist(score_feature, n=1000)
hist(score_feature, n=1000)
hist(score_feature, n=100)
score_feature <- unlist(lapply(searchResultList, function(x)x$best_candidate$score_mass ))
hist(score_feature, n=100)
score_feature <- unlist(lapply(searchResultList, function(x)x$best_candidate$score_feature ))
score_feature
hist(score_feature, n=100)
hist(score_feature, n=10)
hist(score_feature, n=20)
search_result
score_feature
score_feature <- unlist(lapply(searchResultList, function(x)x$best_candidate$score_feature ))
min_score = 0.98
which(score_feature > min_score)
w <-  which(score_feature > min_score)
w
sub_list <- searchResultList[w]
sub_list
ms1_mz <- unlist(lapply(sub_list, function(x) x$search$mz))
ms1_mz
rt <- unlist(lapply(sub_list, function(x) x$search$rt))
rt
plot(ms1_mz,rt)
plot(ms1_mz~rt)
ms2_mz <- unlist(lapply(sub_list, function(x) x$best_candidate$mz))
ms2_mz
ms1_mz=ms2_mz
ms2_mz <- unlist(lapply(sub_list, function(x) x$best_candidate$mz))
ms1_mz-ms2_mz
sub_list[[1]]
ms1_mz <- unlist(lapply(sub_list, function(x) x$search$mz))
rt <- unlist(lapply(sub_list, function(x) x$search$rt))
ms2_mz <- unlist(lapply(sub_list, function(x) x$best_candidate$mz))
ms1_mz-ms2_mz
ms1_mz-ms2_mz-116.0473
(ms1_mz-ms2_mz-116.0473)/116.0473*1e6
scandef_file
scanDef <- read.delim(scandef_file)
scanDef
getSIMWindows()
scandef <- read.delim(scandef_file)
getSIMWindows()
windows <- getSIMWindows()
windows <- getSIMWindows()
widows$simStart
windows$simStart
sampleDIr
sampleDir
sample_directories
sampleDir = sample_directories[1]
sampleDir
lf <- list.files(path = sampleDir, pattern = "mzML", full.names = TRUE, recursive = TRUE)
lf
require(mzR)
msData <- lapply(lf, function(x) mzR::openMSfile(x))
spectra <- lapply(msData, function(x) mzR::spectra(x))
header <- lapply(msData, function(x) mzR::header(x))
windows
mz - mz1_mz
mz = mz1_mz
mz
mz = ms1_mz
mz
mz = ms1_mz[1]
mz
which(windows$simEnd > mz & windows$simStart < mz)
w = which(windows$simEnd > mz & windows$simStart < mz)
windows$srch[w]
windows$srch
w
w <- w[2]
windows$srch[c(w,w+10)]
ppm
ppm = 6
ppm
plotXrt_tol
rt_tol
rt_tol = 1.5
plotXIC(lf)
lf
lf[w]
lf[w+10]
i<-1
plotXIC(mz,ms2_mz[i],ppm = ppm, rt = rt[i], rt_tol = rt_tol, ms1_mzml_file = lf[w],ms2_mzml_file = lf[w+10],smooth = F )
dev.off()
dev.off()
dev.off()
library(wSIMCity)
plotXIC(mz,ms2_mz[i],ppm = ppm, rt = rt[i], rt_tol = rt_tol, ms1_mzml_file = lf[w],ms2_mzml_file = lf[w+10],smooth = F )
lf[w]
ms2_mz[i]
ms1_mz[i]
i<-1
for(mz in mz1_mz){
w = which(windows$simEnd > mz & windows$simStart < mz)
if(length(w)>1){
w <- w[1] # get the window with the highest sim range
}
plotXIC(mz,ms2_mz[i],ppm = ppm, rt = rt[i], rt_tol = rt_tol, ms1_mzml_file = lf[w],ms2_mzml_file = lf[w+10],smooth = F )
}
score_feature <- unlist(lapply(searchResultList, function(x)x$best_candidate$score_feature ))
require(mzR)
w <-  which(score_feature > min_score)
sub_list <- searchResultList[w]
ms1_mz <- unlist(lapply(sub_list, function(x) x$search$mz))
rt <- unlist(lapply(sub_list, function(x) x$search$rt))
ms2_mz <- unlist(lapply(sub_list, function(x) x$best_candidate$mz))
scandef <- read.delim(scandef_file)
windows <- getSIMWindows()
lf <- list.files(path = sampleDir, pattern = "mzML", full.names = TRUE, recursive = TRUE)
i<-1
for(mz in mz1_mz){
w = which(windows$simEnd > mz & windows$simStart < mz)
if(length(w)>1){
w <- w[1] # get the window with the highest sim range
}
plotXIC(mz,ms2_mz[i],ppm = ppm, rt = rt[i], rt_tol = rt_tol, ms1_mzml_file = lf[w],ms2_mzml_file = lf[w+10],smooth = F )
}
for(mz in ms1_mz){
w = which(windows$simEnd > mz & windows$simStart < mz)
if(length(w)>1){
w <- w[1] # get the window with the highest sim range
}
plotXIC(mz,ms2_mz[i],ppm = ppm, rt = rt[i], rt_tol = rt_tol, ms1_mzml_file = lf[w],ms2_mzml_file = lf[w+10],smooth = F )
}
lf[w]
w
mz
w = which(windows$simEnd > mz & windows$simStart < mz)
w
mz
mz <- unlist(lapply(searchResultList, function(x) x$search$mz))
windows
windows$srch
w <-  which(score_feature > min_scor & mz > 330)
score_feature <- unlist(lapply(searchResultList, function(x)x$best_candidate$score_feature ))
mz <- unlist(lapply(searchResultList, function(x) x$search$mz))
w <-  which(score_feature > min_score & mz > 330)
sub_list <- searchResultList[w]
ms1_mz <- unlist(lapply(sub_list, function(x) x$search$mz))
ms2_mz <- unlist(lapply(sub_list, function(x) x$best_candidate$mz))
rt <- unlist(lapply(sub_list, function(x) x$search$rt))
ms2_mz <- unlist(lapply(sub_list, function(x) x$best_candidate$mz))
scandef <- read.delim(scandef_file)
windows <- getSIMWindows()
lf <- list.files(path = sampleDir, pattern = "mzML", full.names = TRUE, recursive = TRUE)
w
i<-1
for(mz in ms1_mz){
w = which(windows$simEnd > mz & windows$simStart < mz)
if(length(w)>1){
w <- w[1] # get the window with the highest sim range
}
if(length(w)>0){
plotXIC(mz,ms2_mz[i],ppm = ppm, rt = rt[i], rt_tol = rt_tol, ms1_mzml_file = lf[w],ms2_mzml_file = lf[w+10],smooth = F )
}
}
i<-1
for(mz in ms1_mz){
w = which(windows$simEnd > mz & windows$simStart < mz)
if(length(w)>1){
w <- w[1] # get the window with the highest sim range
}
if(length(w)>0){
plotXIC(mz,ms2_mz[i],ppm = ppm, rt = rt[i], rt_tol = rt_tol, ms1_mzml_file = lf[w],ms2_mzml_file = lf[w+10],smooth = F )
}
i <- i+1
}
min_score = 0.9
min_intensity = 5000
intensity_1 <- unlist(lapply(searchResultList, function(x) x$search$intensity))
intensity_2 <- unlist(lapply(searchResultList, function(x) x$best_candidate$intensity))
w <-  which(score_feature > min_score & mz > 330 & intensity_1 > min_intensity & intensity_2 > min_intensity)
w
min_score
min_score = 0.95
w <-  which(score_feature > min_score & mz > 330 & intensity_1 > min_intensity & intensity_2 > min_intensity)
w
sub_list <- searchResultList[w]
ms1_mz <- unlist(lapply(sub_list, function(x) x$search$mz))
rt <- unlist(lapply(sub_list, function(x) x$search$rt))
ms2_mz <- unlist(lapply(sub_list, function(x) x$best_candidate$mz))
scandef <- read.delim(scandef_file)
windows <- getSIMWindows()
lf <- list.files(path = sampleDir, pattern = "mzML", full.names = TRUE, recursive = TRUE)
sub_list <- searchResultList[w]
ms1_mz <- unlist(lapply(sub_list, function(x) x$search$mz))
rt <- unlist(lapply(sub_list, function(x) x$search$rt))
ms2_mz <- unlist(lapply(sub_list, function(x) x$best_candidate$mz))
scandef <- read.delim(scandef_file)
windows <- getSIMWindows()
lf <- list.files(path = sampleDir, pattern = "mzML", full.names = TRUE, recursive = TRUE)
i<-1
for(mz in ms1_mz){
w = which(windows$simEnd > mz & windows$simStart < mz)
if(length(w)>1){
w <- w[1] # get the window with the highest sim range
}
if(length(w)>0){
plotXIC(mz,ms2_mz[i],ppm = ppm, rt = rt[i], rt_tol = rt_tol, ms1_mzml_file = lf[w],ms2_mzml_file = lf[w+10],smooth = F )
}
i <- i+1
}
mz[1:10]
score_feature <- unlist(lapply(searchResultList, function(x)x$best_candidate$score_feature ))
mz <- unlist(lapply(searchResultList, function(x) x$search$mz))
intensity_1 <- unlist(lapply(searchResultList, function(x) x$search$intensity))
intensity_2 <- unlist(lapply(searchResultList, function(x) x$best_candidate$intensity))
w <-  which(score_feature > min_score & mz > 330 & intensity_1 > min_intensity & intensity_2 > min_intensity)
mz[1:10]
mz[1:20]
ppm
which(mz == 341.0652)
w = 12
sub_list <- searchResultList[w]
ms1_mz <- unlist(lapply(sub_list, function(x) x$search$mz))
rt <- unlist(lapply(sub_list, function(x) x$search$rt))
ms2_mz <- unlist(lapply(sub_list, function(x) x$best_candidate$mz))
scandef <- read.delim(scandef_file)
windows <- getSIMWindows()
lf <- list.files(path = sampleDir, pattern = "mzML", full.names = TRUE, recursive = TRUE)
i<-1
mz = ms1_mz[1]
mz
ms2_mz[i]
341.0652-116.0473
lf <- list.files(path = sampleDir, pattern = "mzML", full.names = TRUE, recursive = TRUE)
w = which(windows$simEnd > mz & windows$simStart < mz)
w
lf[w]
lf[w+10]
i<-1
for(mz in ms1_mz){
w = which(windows$simEnd > mz & windows$simStart < mz)
if(length(w)>1){
w <- w[1] # get the window with the highest sim range
}
if(length(w)>0){
plotXIC(mz,ms2_mz[i],ppm = ppm, rt = rt[i], rt_tol = rt_tol, ms1_mzml_file = lf[w+10],ms2_mzml_file = lf[w],smooth = F )
}
i <- i+1
}
require(mzR)
score_feature <- unlist(lapply(searchResultList, function(x)x$best_candidate$score_feature ))
mz <- unlist(lapply(searchResultList, function(x) x$search$mz))
intensity_1 <- unlist(lapply(searchResultList, function(x) x$search$intensity))
intensity_2 <- unlist(lapply(searchResultList, function(x) x$best_candidate$intensity))
w <-  which(score_feature > min_score & mz > 330 & intensity_1 > min_intensity & intensity_2 > min_intensity)
sub_list <- searchResultList[w]
ms1_mz <- unlist(lapply(sub_list, function(x) x$search$mz))
rt <- unlist(lapply(sub_list, function(x) x$search$rt))
ms2_mz <- unlist(lapply(sub_list, function(x) x$best_candidate$mz))
scandef <- read.delim(scandef_file)
windows <- getSIMWindows()
lf <- list.files(path = sampleDir, pattern = "mzML", full.names = TRUE, recursive = TRUE)
i<-1
for(mz in ms1_mz){
w = which(windows$simEnd > mz & windows$simStart < mz)
if(length(w)>1){
w <- w[1] # get the window with the highest sim range
}
if(length(w)>0){
plotXIC(mz,ms2_mz[i],ppm = ppm, rt = rt[i], rt_tol = rt_tol, ms1_mzml_file = lf[w+10],ms2_mzml_file = lf[w],smooth = F )
}
i <- i+1
}
rm(list=ls())
library(wSIMCity)
library(wSIMCity)
library(wSIMCity)
library(wSIMCity)
library(wSIMCity)
library(wSIMCity)
library(wSIMCity)
searchResultList[[1]][[1]]
SearchResult[[1]]
library(wSIMCity)
library(wSIMCity)
data("knowns.db")
knowns.db
w <- which(knowns.db$Type =="M")
w
ms1_mz <- knowns.db$MZ[w]
ms2_mz <- knowns.db$MZ[-w]
ms1_nm
ms1_nm <- knowns.db$Adduct[w]
ms2_nm <- knowns.db$Adduct[-w]
ms1_rt <- knowns.db$RT[w]
rt <- knowns.db$RT[w]
rt
lf
klf
lf
plotKnowns
plotKnowns()
library(wSIMCity)
library(wSIMCity)
library(wSIMCity)
library(wSIMCity)
library(wSIMCity)
library(wSIMCity)
library(wSIMCity)
sampleDir
library(wSIMCity)
library(wSIMCity)
library(wSIMCity)
library(wSIMCity)
library(wSIMCity)
library(wSIMCity)
library(wSIMCity)
library(wSIMCity)
library(wSIMCity)
library(wSIMCity)
library(wSIMCity)
